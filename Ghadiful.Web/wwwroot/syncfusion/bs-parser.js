var BSParser
(function (BSParser) {
    var dateCorrection = {
        1949: [2005, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1950: [2006, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1951: [2007, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        1952: [2008, 17, 30, 29, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1953: [2009, 18, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1954: [2010, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1955: [2011, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        1956: [2012, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1957: [2013, 18, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1958: [2014, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1959: [2015, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        1960: [2016, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1961: [2017, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 29, 30],
        1962: [2018, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1963: [2019, 17, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        1964: [2020, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1965: [2021, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1966: [2022, 17, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1967: [2023, 17, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        1968: [2024, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1969: [2025, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1970: [2026, 17, 29, 29, 30, 31, 30, 32, 31, 32, 31, 30, 30, 30, 29],
        1971: [2027, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1972: [2028, 17, 30, 29, 30, 30, 31, 31, 32, 31, 32, 30, 30, 29, 30],
        1973: [2029, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1974: [2030, 17, 29, 29, 30, 31, 30, 32, 31, 32, 31, 30, 30, 30, 29],
        1975: [2031, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1976: [2032, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1977: [2033, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1978: [2034, 17, 29, 29, 30, 31, 30, 32, 31, 32, 31, 31, 29, 30, 30],
        1979: [2035, 17, 30, 29, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1980: [2036, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1981: [2037, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1982: [2038, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        1983: [2039, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1984: [2040, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        1985: [2041, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1986: [2042, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        1987: [2043, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1988: [2044, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 29, 30],
        1989: [2045, 18, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1990: [2046, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        1991: [2047, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1992: [2048, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1993: [2049, 17, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1994: [2050, 17, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        1995: [2051, 18, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1996: [2052, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1997: [2053, 17, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        1998: [2054, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        1999: [2055, 17, 30, 29, 30, 30, 31, 31, 32, 31, 32, 30, 30, 29, 30],
        2000: [2056, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2001: [2057, 17, 29, 29, 30, 31, 30, 32, 31, 32, 31, 30, 30, 30, 29],
        2002: [2058, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2003: [2059, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2004: [2060, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2005: [2061, 17, 29, 29, 30, 31, 30, 32, 31, 32, 31, 31, 29, 30, 29],
        2006: [2062, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2007: [2063, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2008: [2064, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2009: [2065, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        2010: [2066, 17, 30, 29, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2011: [2067, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2012: [2068, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2013: [2069, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        2014: [2070, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2015: [2071, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 29, 30],
        2016: [2072, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2017: [2073, 17, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        2018: [2074, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2019: [2075, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2020: [2076, 16, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2021: [2077, 17, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        2022: [2078, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2023: [2079, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2024: [2080, 16, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2025: [2081, 17, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        2026: [2082, 18, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2027: [2083, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2028: [2084, 16, 29, 29, 30, 31, 30, 32, 31, 32, 31, 30, 30, 30, 29],
        2029: [2085, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2030: [2086, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2031: [2087, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2032: [2088, 16, 29, 29, 30, 31, 30, 32, 31, 32, 31, 30, 30, 30, 29],
        2033: [2089, 17, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2034: [2090, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2035: [2091, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2036: [2092, 16, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        2037: [2093, 17, 30, 29, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2038: [2094, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2039: [2095, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2040: [2096, 16, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        2041: [2097, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2042: [2098, 17, 30, 29, 30, 30, 31, 31, 32, 32, 31, 30, 30, 29, 30],
        2043: [2099, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2044: [2100, 16, 29, 29, 30, 31, 31, 31, 31, 32, 31, 31, 29, 30, 30],
        2045: [2101, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2046: [2102, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 29, 30],
        2047: [2103, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2048: [2104, 16, 29, 30, 29, 31, 31, 31, 31, 32, 31, 31, 30, 29, 30],
        2049: [2105, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 32, 30, 29, 30],
        2050: [2106, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2051: [2107, 16, 29, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29],
        2052: [2108, 16, 29, 30, 29, 31, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2053: [2109, 17, 30, 29, 30, 30, 31, 31, 32, 31, 31, 31, 30, 29, 30],
        2054: [2110, 17, 30, 29, 30, 30, 31, 32, 31, 32, 31, 30, 30, 30, 29]

    };

    /**
     *
     * @param {Date} gDate ?
     * @returns {Object} ?
     */
    var daysInYear = function (date) {
        var days = 0;
        for (i = 1; i <= date.getMonth(); i++) {
            days += daysInMonth(i, date.getFullYear());
        }

        return days + date.getDate();
    }
    var daysInMonth = function (month, year) {
        return new Date(year, month, 0).getDate();
    }
    function getBSDate(gDate) {
        var day = gDate.getDate();
        var month = gDate.getMonth();
        var year = gDate.getFullYear();
        let npDateData = dateCorrection[year];

        let enDayOfYear = daysInYear(gDate);
        let npYear = npDateData[0];

        // //Initializing Nepali month to Poush (9)
        // //This is because English date Jan 1 always fall in Poush month of Nepali Calendar, which is 9th month of Nepali calendar
        let npMonth = 9;

        // //Initializing Nepali DaysInMonth with total days in the month of Poush
        let npDaysInMonth = npDateData[2];

        // //Initializing temp nepali days
        // //This is sum of total days in each Nepali month starting Jan 1 in Nepali month Poush
        // //Note: for the month Poush, only counting days after Jan 1
        // //***** This is the key field to calculate Nepali date *****
        if (npDateData[2] == null || npDateData[2] == undefined)
            return null/* TODO Change to default(_) if this is not a reference type */;
        let npTempDays = npDateData[2] - npDateData[1] + 1;

        // //Looping through Nepali date data array to get exact Nepali month, Nepali year & Nepali daysInMonth information
        i = 3;
        while (enDayOfYear > npTempDays) {
            npTempDays += npDateData[i];
            npDaysInMonth = npDateData[i];
            npMonth = npMonth + 1;

            if (npMonth > 12) {
                npMonth -= 12;
                npYear = npYear + 1;
            }
            i = i + 1;
        }
        // //Calculating Nepali day
        let npDay = npDaysInMonth - (npTempDays - enDayOfYear);

        return { year: npYear, month: npMonth, date: npDay };
    }
    BSParser.getBSDate = getBSDate;
    /**
     *
     * @param {number} year ?
     * @param {number} month ?
     * @param {number} day ?
     * @returns {Date} ?
     */
    function toGregorian(year, month, day) {

        var days = 0;
        var initday = 0;
        var dt = new Date();
        switch (parseInt(month)) {
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8:
                initday = dateCorrection[year - 57][1];
                days = 0;
                for (i = 3; i < (5 + parseInt(month)); i++) {
                    days += dateCorrection[year - 57][i];
                }
                days += day;
                days += dateCorrection[year - 57][2] - dateCorrection[year - 57][1];
                dt = new Date(year - 57, 0, 1);
                dt.setDate(dt.getDate() + days);
                break;
            case 9:
                initday = dateCorrection[year - 57][1];
                if (day < initday) {
                    for (i = 3; i < 14; i++) {
                        days += dateCorrection[year - 57][i];
                    }
                    days += dateCorrection[year - 57][2] - dateCorrection[year - 57][1];
                    days += day;
                    dt = new Date(year - 57, 0, 1);
                    dt.setDate(dt.getDate() + days);
                    break;
                } else {
                    dt = new Date(year - 56, 0, 1);
                   // days += day - initday
                    dt.setDate(dt.getDate() + day);
                    break;
                }
            case 10: case 11: case 12:
                for (i = 3; i < (parseInt(month) - 7); i++) {
                    days += dateCorrection[year - 56][i];
                }
                days += dateCorrection[year - 56][2] - dateCorrection[year - 56][1];
                days += day;
                dt = new Date(year - 56, 0, 1);
                dt.setDate(dt.getDate() + days);
                break;
        }
        return dt;
    }
    BSParser.toGregorian = toGregorian;
})(BSParser || (BSParser = {}));