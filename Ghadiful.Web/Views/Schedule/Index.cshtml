
<h2 hidden>BS Date Picker</h2>
<div id='container' hidden>
    <input id='element' type="text" />
</div>


<br />
<h2 hidden>BS Calendar</h2>
<div class="calendar" hidden>
</div>
<div id="Schedule"></div>

@section Scripts{
    <script src="~/lib/nepalidatepicker/nepalicalendar.js"></script>
    <script src="~/syncfusion/ej-variables.js"></script>
    <script src="~/syncfusion/intl-base.js"></script>
    <script src="~/syncfusion/bs-parser.js"></script>
    <script src="~/syncfusion/parser-base.js"></script>
    <script src="~/syncfusion/number-parser.js"></script>
    <script src="~/syncfusion/date-parser.js"></script>
    <script src="~/syncfusion/date-formatter.js"></script>
    <script src="~/syncfusion/number-formatter.js"></script>
    <script src="~/syncfusion/internationalization.js"></script>
    <script src="~/syncfusion/custom-calendar-base.js"></script>

    <script src="~/syncfusion/ej-schedule.es5.js"></script>
    <script>
        let datePickerObject = new CustomDatePicker({
            calendarMode: "bs"
        });
        datePickerObject.appendTo('#element');
        var month = new Date().getMonth();
        var fullYear = new Date().getFullYear();

        var calendar = new CustomCalendar({
            ////// Sets the min.
            min: new Date(fullYear, month, 9),
            //Sets the max.
            max: new Date(fullYear, month, 15),
            // Sets the value.
            value: new Date(fullYear, month, 11),
            calendarMode: "bs"
        });
        calendar.appendTo('.calendar');
        //Schedule.Inject(Day, Week, WorkWeek, Month, Agenda, TimelineViews, Resize, DragAndDrop);
        Schedule.Inject(TimelineViews, TimelineMonth, Agenda, Resize, DragAndDrop);
        function randomInteger(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        var generateEvents = function () {
            var eventData = [];
            var eventSubjects = [
                'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Traveling', 'Annual Conference', 'Birthday Celebration',
                'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day', 'MoonShiners',
                'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice', 'Rugby Match', 'Guitar Class',
                'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'
            ];
            var weekDate = new Date(new Date().setDate(new Date().getDate() - new Date().getDay()));
            var startDate = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 10, 0);
            var endDate = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 11, 30);
            eventData.push({
                Id: 1,
                Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],
                StartTime: startDate,
                EndTime: endDate,
                Location: '',
                Description: 'Event Scheduled',
                RecurrenceRule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1;COUNT=10;',
                IsAllDay: false,
                IsReadonly: false,
                RoutineId: randomInteger(1, 3),
                GroupId: randomInteger(1, 6)
            });
            for (var a = 0, id = 2; a < 500; a++) {
                var month = Math.floor(Math.random() * (11 - 0 + 1) + 0);
                var date = Math.floor(Math.random() * (28 - 1 + 1) + 1);
                var hour = Math.floor(Math.random() * (23 - 0 + 1) + 0);
                var minutes = Math.floor(Math.random() * (59 - 0 + 1) + 0);
                var start = new Date(new Date().getFullYear(), month, date, hour, minutes, 0);
                var end = new Date(start.getTime());
                end.setHours(end.getHours() + 2);
                startDate = new Date(start.getTime());
                endDate = new Date(end.getTime());
                eventData.push({
                    Id: id,
                    Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],
                    StartTime: startDate,
                    EndTime: endDate,
                    Location: '',
                    Description: 'Event Scheduled',
                    IsAllDay: id % 10 === 0,
                    IsReadonly: endDate < new Date(),
                    RoutineId: randomInteger(1, 3),
                    GroupId: randomInteger(1, 6)
                });
                id++;
            }
            if (/MSIE \d|Trident.*rv:/.test(navigator.userAgent)) {
                ej.schedule.Timezone.prototype.offset = function (date, timezone) {
                    return moment.tz.zone(timezone).utcOffset(date.getTime());
                };
            }
            var overviewEvents = ej.base.extend([], eventData, null, true);
            var timezone = new ej.schedule.Timezone();
            var currentTimezone = timezone.getLocalTimezoneName();
            for (var i = 0; i < overviewEvents.length; i++) {
                var event = overviewEvents[i];
                event.StartTime = timezone.convert(event.StartTime, 'UTC', currentTimezone);
                event.EndTime = timezone.convert(event.EndTime, 'UTC', currentTimezone);
            }
            return overviewEvents;
        };
        //var scheduleObj = new Schedule({
        //    height: '550px',
        //    calendarMode:'bs',
        //    //views: [{ option: 'WorkWeek', workDays: [0,1,2, 3, 4,5] }],
        //    //views: [{ option: 'TimelineWorkWeek', interval: 3, workDays: [0,1, 2,3, 4,5], dateFormat: 'dd-MMM-yyyy' }],
        //    selectedDate: new Date(2023, 5, 13),
        //    eventSettings:{dataSource: generateEvents()},
        //});
        //scheduleObj.appendTo('#Schedule');




        let scheduleOptions = {
            width: '100%',
            height: '650px',
            calendarMode: 'bs',
            selectedDate: new Date(),
            views: ['TimelineDay', 'TimelineWeek', 'TimelineWorkWeek', 'TimelineMonth', 'Agenda'],
            currentView: 'TimelineWeek',
            workDays: [0, 1, 2, 3, 4, 5],
            group: {
                resources: ['Routines', 'Groups']
            },
            resources: [
                {
                    field: 'RoutineId', title: 'Choose Routine', name: 'Routines',
                    dataSource: [
                        { text: 'Default Shift summer', id: 1, color: '#cb6bb2' },
                        { text: 'Over Time shift for three hour', id: 2, color: '#56ca85' },
                        { text: 'Over Time shift for five hours', id: 3, color: '#df5286' }
                    ],
                    textField: 'text', idField: 'id', colorField: 'color'
                }, {
                    field: 'GroupId', title: 'Groups',
                    name: 'Groups', allowMultiple: true,
                    dataSource: [
                        { text: 'Narayan Bhakta Shrestha (E00001)', id: 1, groupId: 1, color: '#df5286' },
                        { text: 'Manju Maharjan (E00002)', id: 2, groupId: 1, color: '#7fa900' },
                        { text: 'Jagadishwar Man Singh (E00003)', id: 3, groupId: 2, color: '#ea7a57' },
                        { text: 'Rabindra Raj Shrestha (E00004)', id: 4, groupId: 2, color: '#5978ee' },
                        { text: 'Rajesh Roy (E00005)', id: 5, groupId: 3, color: '#df5286' },
                        { text: 'Santosh Kumar Jha (E00006)', id: 6, groupId: 3, color: '#00bdae' }
                    ],
                    textField: 'text', idField: 'id', groupIDField: 'groupId', colorField: 'color'
                }
            ],
            eventSettings: {
                dataSource: generateEvents()
            },


        };

        let scheduleObj = new Schedule(scheduleOptions);
        scheduleObj.appendTo('#Schedule');
        //var originalAddEvent = Schedule.prototype.addEvent;

        //// Extend the addEvent method
        //Schedule.prototype.addEvent = function (eventData, eventOptions, eventWrap) {
        //    debugger;
        //    originalAddEvent.call(this, eventData, eventOptions, eventWrap);
        //};
    </script>
}