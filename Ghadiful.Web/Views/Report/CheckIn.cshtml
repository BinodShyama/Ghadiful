@using Ghadiful.ViewModel.Employees;
@using Ghadiful.ViewModel.Organizations;
@using Ghadiful.ViewModel.Reports
@using Newtonsoft.Json;
@using Syncfusion.EJ2
@{
    ViewData["Title"] = "Check In Report";
    List <OrganizationViewModel> orgData = ViewBag.OrgData as List<OrganizationViewModel>;    
    var valueAccessor = "valueAccessorFn";
}
@model List<CheckInViewModel>
@{
    foreach (var item in orgData)
    {
        if (orgData.Any(c => c.ParentId == item.Id))
        {
            item.HasChild = true;
        }
    }
}

<div class="d-flex justify-content-between align-items-center">
<h1 class="fw-bold py-3 mb-0 display-6">
        @ViewBag.Title
</h1>
    <button class="btn btn-sm btn-success" onclick="exportPDF();">Export to PDF</button>
</div>

<div style="display:flex; gap:5px;align-items: flex-end; margin-bottom: -1px;
    background: #fff;
    padding: 10px;
    border: 1px solid #dee2e6;;">
    <div style="width:150px;">
<label>Start Date</label>
        <div class="e-input-group">
        <input class="e-input" id="startDate"  />
        </div>
    </div><div style="width:150px;">
<label>End Date</label>
            <div class="e-input-group">
        <input class="e-input" id="endDate" />
    </div></div>
<div style="width: 300px; height: auto; position:relative">
    <div class="treeviewfilter">
        <label>Organization</label>
        <!-- TextBox Element -->
        <input id="mask" type="text" value="@ViewBag.Org">
        <!-- TreeView Element -->
                <div id="treeView" style="display:none;     position: absolute;
    left: 0px;
    top: 56px;
    z-index: 50;
    background: white;
    border: 1px solid #bbb;
    border-radius: 8px;
    max-height: 300px; 
    overflow: auto;"></div>
    </div>
</div>
    <div style="flex:1;">
<label>Employee</label>
        <div class="e-input-group">
<input id="empId" type="search"
       class="e-input" style="width:100%;"
       placeholder="Search..."
       aria-label="Search..." />
        </div></div>
    <input type="button" class="btn btn-primary btn-sm" value="Show Report" onclick="update();" />
</div>
<ejs-grid id="mainGrid" dataSource="@Model" allowFiltering="true" showColumnChooser="true" toolbar="@( new List<string>() { "ExcelExport", "PdfExport", "CsvExport" ,"ColumnChooser"})" allowGrouping="true" allowExcelExport="true" allowPdfExport="true" , allowResizing="true" allowPaging="true" allowSorting="true" height="400" rowHeight="20">
    <e-grid-pagesettings pageSize="35"></e-grid-pagesettings>
    <e-grid-filtersettings type="Excel"></e-grid-filtersettings>
    <e-grid-loadingIndicator indicatorType="Shimmer"></e-grid-loadingIndicator>
    <e-grid-groupSettings showDropArea="true" columns="@(new string[] { "Date"})"></e-grid-groupSettings>
    <e-grid-columns>        
        <e-grid-column field="Date" valueAccessor="valueAccessor" headerText="BSDate" width="90"></e-grid-column>
        <e-grid-column field="EmployeeName" headerText="Name" width="150"></e-grid-column>
        <e-grid-column field="EmployeePost" headerText="Post" width="100"></e-grid-column>
        <e-grid-column field="EmployeeLevel" headerText="Level" width="60"></e-grid-column>
        <e-grid-column field="EmployeeOffice" headerText="Office" width="250"></e-grid-column>
        <e-grid-column field="ShiftStart" headerText="Shift Begin" width="100"></e-grid-column>
        <e-grid-column field="ShiftEnd" headerText="Shift End" width="100"></e-grid-column>
        <e-grid-column field="CheckIn" headerText="Check In" width="100"></e-grid-column>    
        <e-grid-column field="CheckOut" headerText="Check Out" width="100"></e-grid-column>   
    </e-grid-columns>
</ejs-grid>

@section Scripts{
    <script src="~/js/ghadiful.reports.js"></script>
    <script type="text/javascript">
        CheckIn.StartDate = new Date('@ViewBag.StartDate');
        CheckIn.EndDate = new Date('@ViewBag.EndDate');
        CheckIn.InitilizeComponents();      

        function valueAccessorFn(field, data, column) {            
            return formatDate(data[field]);
        }    
        function exportPDF(){
            var gridObj = document.getElementById("mainGrid").ej2_instances[0];
            let exportProperties = {
                fileName: "CheckInReport.pdf",
                pageSize: 'A4',
                isAutoFit: true,
                pageOrientation: 'Landscape',
            };
            //if (args.item.id === 'Grid_pdfexport') {
            //gridObj.showSpinner();
            gridObj.pdfExport(exportProperties);
            //gridObj.hideSpinner();
            //}
        }
        var orgData = @Html.Raw(JsonConvert.SerializeObject(orgData));
        $.each(orgData, function (i, d) {
            if (d.ParentId == null || d.ParentId == undefined) {
                d.expanded = true;
            } else {
                d.expanded = false;
            }
        });
        function update() {
            let startDate = CheckIn.StartDate.toISOString();
            let endDate = CheckIn.EndDate.toISOString();
            $.ajax({
                type: "GET",
                url: `/report/apicheckin?startDate=${startDate}&endDate=${endDate}&orgId=${orgId}&empId=${empId}`,
                datatype: "json",
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    var gridObj = document.getElementById('mainGrid').ej2_instances[0];
                    gridObj.changeDataSource(result);
                    //gridObj.refreshColumns();
                },
                error: function (args) {
                    alert('error occurred');
                }
            });

        }
    </script>
    <script src="~/js/treeview.js"></script>
    <script type="text/javascript">
        const empAutoComplete = new autoComplete({
            selector: "#empId",
            placeHolder: "Search an employee",

            data: {
                src: async (query) => {
                    try {
                        if (query !== undefined && query.replace(/ /g, "").length >= 3) {
                            const source = await fetch(`/employee/search?query=${query}`);
                            const data = await source.json();
                            return data;
                        }
                    } catch (error) {
                        return error;
                    }
                },
                keys: ["name", "deviceenrollnumber"],
                cache: false,
            },
            resultItem: {
                highlight: false
            },
            events: {
                input: {
                    selection: (event) => {
                        const selectedItem = event.detail.selection.value;
                        empId = selectedItem.id;
                        $("#empId").val(selectedItem.name);
                        orgId = 0;
                        // reset organization selection
                        var maskObj = document.getElementById('mask').ej2_instances[0];
                        maskObj.value = '';
                    }
                }
            }
        });
    </script>
    }